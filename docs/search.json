[
  {
    "objectID": "posts/03-python-m-flag/index.html",
    "href": "posts/03-python-m-flag/index.html",
    "title": "Module execution in Python: Import, python -m script.py, and python script.py",
    "section": "",
    "text": "Understanding python -m script.py vs. python script.py and import\nHave you ever wondered why you run python -m venv myenv and not python venv myenv?\nHave you ever tried to run a Python file that imported another one of your local modules and encountered this error?\npython .\\test\\first_module_tests\\test1.py  \nTraceback (most recent call last):  \n  File \"~\\project_dir\\test\\first_module_tests\\test1.py\", line 5, in &lt;module&gt;  \n    from src.module_folder.module1 import this_function  \n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  \nModuleNotFoundError: No module named 'src'\nThese situations relate to how the Python interpreter works under the hood. In this article, we’ll explain the differences between executing Python code using import, python script.py, and python -m script.py.\n\n\nModules and Packages in Python\nBefore diving into the differences, let’s define some terms:\n\nModules : The fundamental building blocks of Python. There are two types:\n\nCode modules : Files containing Python code (e.g., example.py).\n\nPackage modules : Directories containing other modules, often marked with an __init__.py file. (Optional from Python 3.3).\n\nModulename vs. Filename :\n\nModulename : The Python identifier used for importing a module (e.g., import mymodule).\n\nFilename : The actual file path used to execute a script (e.g., python ./mymodule.py). Python resolves modulenames to filenames based on the sys.path variable, which defines where the interpreter looks for modules.\n\n\n\n\n\nHow Python Executes Modules\nLet’s compare three ways of running Python code:\n\nimport (module execution through import statement): When you use import, the interpreter loads the module into memory, executes its top-level code, and makes its contents available for use. For example:\n\n\n    import mymodule\n\nEffects :\n\nsys.path is not modified .\n__name__ is set to the absolute modulename (e.g., mymodule).\nFor package modules, the __init__.py file is executed.\n\n\n\npython script.py (module execution through command line with filename). Executing a file with python script.py runs it as a standalone script:\n\n\npython myscript.py\n\nEffects :\n\nThe directory of the script (myscript.py) is added to sys.path.\n__name__ is set to __main__.\nFor package modules, __init__.py is not executed.\n\n\n\npython -m modulename (module exeuction through command line with modulename). The -m flag allows you to execute a module by its name:\n\n\npython -m mypackage.myscript\n\nEffects :\n\nThe current working directory (i.e., from where you are executing your commands) is added to sys.path.\n__name__ is set to __main__.\nFor package modules, __init__.py is executed, followed by __main__.py.\n\n\n\n\nKey Differences\n\n\n\n\n\n\n\n\n\n\nExecution Method\nsys.path\n__name__\nExecutes __init__.py\nExecutes __main__.py\n\n\n\n\nimport modulename\nUnchanged\nmodulename\nYes\nNo\n\n\npython script.py\nAdds script’s directory\n__main__\nNo\nYes (for package module)\n\n\npython -m modulename\nAdds current directory\n__main__\nYes\nYes (for package module)\n\n\n\n\n\n\n\nWhy Use python -m?\nThe -m flag combines the convenience of modulenames with the ability to do relative imports from a root directory. Particularly:\n\nExecuting Standard Library or Third-Party Tools : Many tools (like venv or http.server) are modules in the Python standard library or installed packages. Their filenames are not found easily, but their modulenames are:\n\npython -m venv\nThat solves our first question from the intro.\nIf we tried to run python venv, we would be referencing the filename. Hence, Python would try to look for venv in the current directory, which will result in:\npython venv\n.\\venv': [Errno 2] No such file or directory\n\nRunning Local Modules with Imports : python -m helps avoid import errors when running modules from a root project directory. Imagine you’re working with this directory structure:\n\nproject_dir/\n    src/\n        module1.py\n    tests/\n        test_module1.py\nRunning python -m tests.test_module1 ensures the src package in test_module1.py is available for imports.\nPlease note several caveats here.\nFirst, for testing you would usually resort to either pytest ... or python -m unittest tests/test_module1.py. Second, one common error that I got when I didn’t know about the differences between modulenames and filenames was trying to run python -m tests/test_module1.py, which returned the following message: &gt; Relative module names not supported\nAt first, I thought this was related to the imports in test_module1.py. However, now I realize this is due to us using the -m flag for modulenames, which means the Python interpreter is treating the filepath as a modulename, and warns you that relative module names with slashes are not supported.\nOn the other hand, if you try to use the syntax for filenames python tests/test_module1.py, this will fail when there is an import in your tests that requires to use the src structure.\nWhy? Because as mentioned above, the filename execution from the command line (python script.py) adds the directory of the executed file to the sys.path, whereas the modulename execution adds the current working directory.\nTherefore, if we try to import src without having added the current working directory (project directory) to the sys.path, the Python interpreter won’t find any module named src in the script directory (in this case, tests), telling us src wasn’t found.\n\n\nConclusion\nThe python -m flag is more than a shorthand—it’s a powerful tool that bridges the gap between imports and script execution. It allows you to execute modules while preserving the integrity of their package structure, supports relative imports, and is essential for running tools and packages from the command line.\nOn the other hand, executing python without the -m flag executes modules using their filenames, adding their directory to sys.path.\nI hope you found this blog post useful! If you have any questions or comments, feel free to reach out.\nNote: The main source for this post is this stackoverflow response to a similar question."
  },
  {
    "objectID": "posts/01-how-to-setup-your-gh-pages-blog/index.html",
    "href": "posts/01-how-to-setup-your-gh-pages-blog/index.html",
    "title": "How to host your Quarto blog in GitHub Pages",
    "section": "",
    "text": "This blog was created through Quarto. Quarto is a markdown language developed by Posit with the aim of integrating different markdown languages for scientific and resource publishing (such as blogdown for blogs or bookdown for books) together with Python, R, and Julia; that is, trying to remain language-agnostic between the main languages that support data science for content publishing. You can use Quarto to create presentations, papers, reports, books, blogs like this one, and much more.\nThere are two steps to set up your Quarto blog in GitHub Pages, the first one being the Quarto blog itself and the second one publishing to a web domain through GitHub Pages. I won’t teach here the methods for creating a blog in Quarto. For Spanish speakers, there is a great workshop by Pedro J. Pérez that guides you through the process, it is quite comprehensive (actually, it’s what I used to generate mine, so thank you Pedro!). As I didn’t use an English tutorial, I am not familiar with similar sources to that workshop in English, so I would start by the Quarto documentation. Any suggestions are welcome here to help other English-speaking students.\nHere I will teach you the second step, how to host your blog in GitHub Pages through a GitHub Actions process. There is a clear guide in the Quarto documentation for publishing your blog in different ways. However, I got a bit lost in the process, so I’ll refresh the steps I took here:\nFirst, you create a new repo in GitHub, called {username}.github.io; mine is called alberto-agudo.github.io. Then, you bring your Quarto project folder into that repo.\nMake sure you publish your latest blog posts and the current state of the blog through the following command in the terminal: quarto publish gh-pages. This creates a YAML configuration (_publish.yml) which is used by the subsequent invocations of the GitHub Action. You only need to run this once, as the following publications will come along every time you push your changes on the site to main.\nOnce you’ve completed a local publish, add a publish.yml GitHub Action to your project by creating this YAML file and saving it to .github/workflows/publish.yml in your Quarto blog folder:\non:\n  workflow_dispatch:\n  push:\n    branches: main\n\nname: Quarto Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v4\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n\n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\nThis is a GitHub Action that will render and publish your quarto website every time you push new changes to the main branch of your Quarto project folder. You need to make sure you’ve checked the Read and write permissions box in Repository settings -&gt; Actions -&gt; Workflow permissions.\nNow, although not compulsory, I recommend that you add two lines to the .gitignore file of your Quarto project folder, as you’ll be publishing your blog through a process that doesn’t require them, and this might create large git diffs in your repo in the long-term.\n/.quarto/\n/_site/\nNow, if you haven’t done so, push your changes to the main branch of your GitHub repo.\nFinally, the last step that I forgot to take was to modify the settings for Build and Deployment of your GitHub Pages site from a certain branch. You need to configure it under repo Settings -&gt; Code and automation / Pages. Under the Branch from where the page is built, you need to specify gh-pages, which is a branch created when you run quarto publish gh-pages. You also need to specify the folder to use for the site within your Source branch, which is \\root.\n\nOnce the GitHub Action finishes running, and the Settings of Pages are synced with the gh-pages branch, your site should be up and running soon.\nThis is how I have set up my Quarto blog to run and create a site through GitHub Pages and the use of GitHub Actions. I hope it helps you to set it up too."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Alberto Agudo Domínguez",
    "section": "",
    "text": "I am a data scientist, currently working at Ebiquity plc. My primary interests are programming, cloud architecture, statistics and artificial intelligence.\nPlease do get in touch if you want to propose a project or discuss any ideas."
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Posts",
    "section": "",
    "text": "Module execution in Python: Import, python -m script.py, and python script.py\n\n\n\n\n\n\n\n\n\n\n\nJan 16, 2025\n\n\nAlberto Agudo Domínguez\n\n\n\n\n\n\n\n\n\n\n\n\nuv cheatsheet for package management in Python\n\n\n\n\n\n\n\n\n\n\n\nDec 18, 2024\n\n\nAlberto Agudo Domínguez\n\n\n\n\n\n\n\n\n\n\n\n\nHow to host your Quarto blog in GitHub Pages\n\n\n\n\n\n\n\n\n\n\n\nFeb 11, 2024\n\n\nAlberto Agudo Domínguez\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome to this blog\n\n\n\n\n\n\n\n\n\n\n\nJan 28, 2024\n\n\nAlberto Agudo Domínguez\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/00-first-post/index.html",
    "href": "posts/00-first-post/index.html",
    "title": "Welcome to this blog",
    "section": "",
    "text": "Hi, this is Alberto. Welcome to my blog. I will use it as a platform to collate my notes and thoughts about different programming, statistics, and AI concepts. I intend to use it as a way to record what I learn, so that new ideas become clearer by trying to explain them and also so you can benefit from it.\nAs most of my posts will be related to code or other technical concepts, I’d like to sometimes complement the content of the blog with images of a completely unrelated topic that I find enjoyable: Sculpture. This is the Artemision Jockey, a bronze sculpture from the Hellenistic Period which can be found in the Archaeological Museum of Athens. It shows a young jockey riding a horse.\n\nI did not take this photo, but I have been lucky enough to see this work in person (and bad enough of a photographer to not use the one I took at the museum). I am humbled to think that someone was able to craft this with bronze more than two thousand years ago. I find it inspiring, and it motivates me to learn and become a craftsman like the author of this piece of art. Hence, I hope this blog helps me as well as you to, just like that horse, push forward."
  },
  {
    "objectID": "posts/02-uv-for-package-management-in-python/index.html",
    "href": "posts/02-uv-for-package-management-in-python/index.html",
    "title": "uv cheatsheet for package management in Python",
    "section": "",
    "text": "Note: This post assumes previous Python package management knowledge, mainly virtualenv and pip."
  },
  {
    "objectID": "posts/02-uv-for-package-management-in-python/index.html#uv-for-fast-and-versatile-package-management-in-python",
    "href": "posts/02-uv-for-package-management-in-python/index.html#uv-for-fast-and-versatile-package-management-in-python",
    "title": "uv cheatsheet for package management in Python",
    "section": "uv for fast and versatile package management in Python",
    "text": "uv for fast and versatile package management in Python\nThis post is probably only interesting to you if you program in Python.\nIf you’re not using conda, you’ve probably resorted to pip to manage your packages.\nIf you’ve worked in multiple projects at the same time, it’s quite likely you’ve used virtualenv at some point, or other virtual environment alternatives like pipenv.\nAs of 2024, a new, Rust-written, Python package and project manager has been developed. It aims to substitute the functionality of many other Python package managers. Its name is uv, developed by Astral.\nuv allows you to create and manage a virtual environment, install or remove packages or different Python versions and much more within a single tool.\nAnd most importantly, it does it crazy fast, here are their own benchmarks for installing Trio’s dependencies with a warm cache. \nHence, its two main strengths are versatility and speed.\nI’d like to emphasize how versatile uv is by citing their own words:\n\n🚀 A single tool to replace pip, pip-tools, pipx, poetry, pyenv, twine, virtualenv, and more.\n\nThe best in-depth article I’ve read about it is this one. Particularly, the sections that I find the most useful for reference are the cheatsheets; one for uv vs existing tooling, and then the native uv workflow.\nTo build upon it, here I’ll outline some commands to create a quick reference cheatsheet based on my experience with the package.\nHere are the commands I promised. First for integrating UV into your current use of pip or virtualenv. Then, on how to use native uv when setting up a completely new project.\n\nIntegrating uv into existing workflows\n\nuv installation:\n\n\nmacOS/Linux:\n\ncurl -LsSf https://astral.sh/uv/install.sh \\| sh\n\nWindows:\n\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 \\| iex\"\n\npip:\n\npip install uv\n\nInstalling Python:\nuv python install 3.12\nManaging virtual environments:\n\n\nPreviously:\n\npython3.12 -m venv /path/to/environment\n\nCurrently:\n\nuv venv /path/to/environment --python 3.12\n\nInstalling a package:\n\n\nPreviously:\n\npip install flask\n\nCurrently:\n\nuv pip install flask\n\nBuilding package dependencies (requirements.txt) file:\n\n\npip-tools:\n\npip-compile requirements.in -o requirements.txt\n\nuv:\n\nuv pip compile requirements.in -o requirements.txt\n*) BONUS: Exporting package dependencies from native uv to requirements.txt:\nSometimes you might find yourself needing requirements.txt of a project you’ve built with uv (at least I’ve found myself in that situation). You can use this command to export all your dependencies from your lockfile (uv.lock):\nuv export --format requirements-txt\n\n\n\nUsing native uv:\n\nInitializing repo: uv init repo\nThat will create a pyproject.toml file, which will handle the package requirements of the project. It also automatically creates a virtual environment.\nAdding package dependencies: uv add (e.g., flask)\nYou can also manually specify packages in pyproject.toml. There are many options to specify the source, or specify a different package version depending on the OS you’re using. For more info check the uv add docs.\nRemoving package dependencies: uv remove\nSame as the previous one but for removing dependencies from the toml file. Here uv shines for its quick conflict resolution.\nInstalling dependencies: uv sync\n\nThis part involves a two-step process. First, it locks the project dependencies from pyproject.toml into a lockfile (uv.lock), which has a complete detail about all the direct and indirect dependencies of the project. After that, it installs (or removes) the changes in dependencies into the virtual environment, setting everything up to run your project with the exact set of dependencies you’ve specified.\n\nRunning a python file: uv run (e.g., app.py)\n\nThis one is similar to running python script.py, but first it run uv sync to make sure that all dependencies are installed and up to date before running.\nIf you want to run Python interactively, you can specify uv run python\n\nChecking current dependencies tree: uv tree\n\n\nThis is a very short list of commands I’ve found useful so far, for more information please check out the blog I’ve mentioned above and feel free to reach me out if you’d like me to add something.\nIn next posts I might expand on the use of uv or explore Ruff, a very fast linter from the same developers.\nThanks for reading and I hope you found this useful!"
  }
]